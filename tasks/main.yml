---
- name: Grafana | Merge user data with default
  set_fact:
    grafana: "{{ grafana_data | combine(grafana, recursive=True) }}"
  tags:
    - always

- name: Grafana | Create storage directory for Grafana
  file:
    dest: "{{ grafana.grafana_storage }}"
    state: directory
    # TODO(sbog): change it from 0777 to according 0755 and fix user/group ownership
    mode: 0777
    owner: root
    group: root

- name: Grafana | Create provisioning directory
  file:
    dest: "{{ item }}"
    state: directory
    mode: 0755
    owner: root
    group: root
  with_items:
    - "{{ grafana.provisioning_dir }}"
    - "{{ grafana.provisioning_dir }}/datasources"
    - "{{ grafana.provisioning_dir }}/dashboards"
    - "{{ grafana.provisioning_dir }}/notifiers"
    - "{{ grafana.provisioning_dir }}/dashboards_list"

- name: Grafana | Ensure datasources
  template:
    src: "{{ item }}"
    dest: "{{ grafana.provisioning_dir }}/datasources/{{ item|basename }}"
    owner: root
    group: root
    mode: 0644
  with_fileglob:
    - "../templates/datasources/*"

- name: Grafana | Ensure dashboards configuration
  template:
    src: dashboards/dashboards.yaml
    dest: "{{ grafana.provisioning_dir }}/dashboards/"
    owner: root
    group: root
    mode: 0644

- name: Grafana | Ensure dashboards themselves
  copy:
    src: "{{ item }}"
    dest: "{{ grafana.provisioning_dir }}/dashboards_list/"
    owner: root
    group: root
    mode: 0644
  with_fileglob:
    - "dashboards/*"

- name: Grafana | Import LDAP configuration
  import_tasks: ldap.yml
  when: grafana_ldap_auth_enabled
  tags: ldap

- name: Grafana | Start docker Grafana container
  community.docker.docker_compose:
    project_name: grafana
    definition:
      version: '2'
      services:
        grafana:
          image: "grafana/grafana"
          container_name: "grafana"
          ports:
            - "127.0.0.1:3000:3000"
          volumes: "{{ grafana_volumes }}"
          hostname: "grafana"
          restart: always
          labels: "{{ grafana.docker_labels }}"
          environment:
            GF_PATHS_PROVISIONING: /etc/grafana/provisioning
            GF_SECURITY_ADMIN_USER: "{{ grafana.admin_user }}"
            GF_SECURITY_ADMIN_PASSWORD: "{{ grafana.admin_password }}"
            GF_AUTH_LDAP_ENABLED: "{{ grafana_ldap_auth_enabled | string }}"
            GF_AUTH_LDAP_CONFIG_FILE: "{{ grafana_ldap_config_path }}/ldap.toml"
            GF_AUTH_LDAP_ALLOW_SIGN_UP: "{{ grafana_ldap_allow_sign_up | string }}"
      networks:
        default:
          external:
            name: "{{ grafana_docker_network_name }}"

- name: Create new users
  uri:
    url: "{{ grafana_url }}/api/admin/users"
    user: "{{ grafana.admin_user }}"
    password: "{{ grafana.admin_password }}"
    force_basic_auth: yes
    method: POST
    headers:
      Accept: application/json
      Content-Type: application/json
    body:
      name: "{{ item.name }}"
      email: "{{ item.email }}"
      login: "{{ item.email }}"
      password: "{{ item.password }}"
    body_format: json
  register: result
  failed_when: not (result.status == 200 or (result.status == 412 and result.json.message is regex("^User with email .* or username .* already exists$")))
  changed_when: result.status == 200
  until: result.status != -1
  retries: 5
  with_items: "{{ grafana_user_list }}"
  tags: [add_users]

- name: Import Loki tasks
  import_tasks: loki.yml
  when: grafana_loki_install